/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

%{C++
#include "nsCOMArray.h"
#include "nsStringGlue.h"
%}
[ref] native nsStringTArrayRef(nsTArray<nsString>);

#include "nsISupports.idl"
#include "nsINetworkManager.idl"

interface nsIIccInfo;
interface nsIMobileConnectionInfo;
interface nsIMobileMessageCallback;

[scriptable, uuid(2bec1b5e-a53f-4343-98e2-64eeebc8e925)]
interface nsIRilNetworkInterface : nsINetworkInterface
{
  readonly attribute unsigned long serviceId;
  readonly attribute DOMString iccId;

  /* The following attributes are for MMS proxy settings. */
  readonly attribute DOMString mmsc;     // Empty string if not set.
  readonly attribute DOMString mmsProxy; // Empty string if not set.
  readonly attribute long      mmsPort;  // -1 if not set.
  readonly attribute DOMString apnEnable;
};

[scriptable, uuid(4441e660-4ad0-11e4-916c-0800200c9a66)]
interface nsIRilContext : nsISupports
{
  /**
   * One of the nsIIccProvider.CARD_STATE_* values.
   */
  readonly attribute unsigned long cardState;

  readonly attribute DOMString imsi;

  readonly attribute nsIIccInfo iccInfo;
};

[scriptable, function, uuid(3bc96351-53b0-47a1-a888-c74c64b60f25)]
interface nsIRilSendWorkerMessageCallback : nsISupports
{
  boolean handleResponse(in jsval response);
};

[scriptable, uuid(fe01c648-867a-11e4-915f-033b36e8177b)]
interface nsIRadioInterface : nsISupports
{
  readonly attribute nsIRilContext rilContext;

  /**
   * PDP APIs
   *
   * @param networkType
   *        Mobile network type, that is, nsINetworkInterface.NETWORK_TYPE_MOBILE
   *        or one of the nsINetworkInterface.NETWORK_TYPE_MOBILE_* values.
   */
  void setupDataCallByType(in long networkType);
  void deactivateDataCallByType(in long networkType);
  long getDataCallStateByType(in long networkType);

  void updateRILNetworkInterface();
  void getPCSCFAddressIF(out DOMString v6address, out DOMString v4address);
  [noscript] void getPCSCFAddressList(out nsStringTArrayRef v6addressList, out nsStringTArrayRef v4addressList);

  void sendWorkerMessage(in DOMString type,
              [optional] in jsval message,
              [optional] in nsIRilSendWorkerMessageCallback callback);

  void QueryInfoForImsIF();
  void GetLteInfoIF(out DOMString LteInfo);
  void GetEhrpdInfoIF(out DOMString EhrpdInfo);
  void SetIMSRegistateIF(in boolean regiState);
  void SetImsStatusForDanIF( in unsigned long ims_status);
  void SetE911StateIF( in unsigned long ims_status, in unsigned long ims_mode);
  void GetPhoneInfoIF(in unsigned long mode,out DOMString PhoneInfo);

  void sendDefaultAttachProfileIF(in unsigned long profileId);

  void getActiveImsApnStringIF(out DOMString mActiveApn);

  void getActiveEmergencyApnStringIF(out DOMString mActiveEApn);
};

[scriptable, uuid(78b65e8c-68e7-4510-9a05-65bba12b283e)]
interface nsIRadioInterfaceLayer : nsISupports
{
  readonly attribute unsigned long numRadioInterfaces;

  nsIRadioInterface getRadioInterface(in unsigned long clientId);

  /**
   * Select a proper client for dialing emergency call.
   *
   * @return clientId or -1 if none of the clients are avaialble.
   */
  unsigned long getClientIdForEmergencyCall();

  void setMicrophoneMuted(in boolean muted);
};
